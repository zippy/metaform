= Metaform

This plugin provides a system for defining and generating forms for complex
data-collection using a domain specific language (dsl) to create:
* a data model and a specification of how that data is constrained
* a presentation specification about how fields from forms will appear when displayed
* workflows that specify the states a form can go through and actions that move a form from one state to another
* listings to retrieve groups of forms based on arbitrary criteria
* reports to retrieve aggregate information across forms
The system also includes a "widget" system that pre-defines a number of html widgets
including radio-button and check-box groups, text-based date entry, etc.. which all
include javascript handling for in browser use of widget values regardless of how they are
displayed. For example, a date widget might be displayed as three text input boxes, but
the widget generates javascript to get the true date value out of the widget directly.

== Getting Started (Installation)

* You may need to add this line:

 config.plugins = [ :all, :metaform ] 

into your environment.rb file to make metaform load last in the load order.

* Add the code from example/routes.rb into your config/routes.rb file.

* Use the generator:

 ./script/generate metaform

This will add:
 - two migrations (which you need to rake db:migrate for) 
 - the "forms" directory where you will define your forms using the metaform DSL (see below)
 - a javascript file to your public/javascripts
 - the default css stylesheet to public/stylesheets
 - records/show.rhtml and records/new.rhtml to app/views/ as sample views that use metaform to create forms

* Include the following helper in the head of your application layout:
 <%= include_metaform_assets %>
This will load the javascripts and the stylesheets when needed.  To tell this function when to load the assets
simply add: 
 <%@metaform_include_assets = true%>
to the top of the view that shows a form.

== The Metaform Domain Specific Language (DSL)

Metaform defines an abstraction that separates data definition from data display.  Much like you are
used to in rails data model and views.

=== Defining the data model
def_fields
	f <field_name>,<field_type>,<constraints>,<options (:default,:indexed_default_from_null_index)>
	fwf <field_name>,<field_type>,<constraints>,<options> (must include a :followups option)
end

constraints:
	required
	regex
	range
	set
	enumeration

def_workflows <work_flow_name>
	def_normal_states <state_name>...
	def_verification_states <state_name>...
	action <name>,[<legal_states>...] do
		...
		state <state_name>
	end
end

=== Defining presentations

presentation <presentation_name>,<options (:legal_state, :indexed)> do
	<q>...
	<p>...
end

=== Listings

=== Reports
	
-----

Copyright (c) 2007 Harris-Braun Enterprises, LLC (eric -at- harris-braun.com) released under the MIT license
